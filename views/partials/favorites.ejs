<!-- views/partials/favorites.ejs with DaisyUI -->
<div class="mt-6 mb-6 w-full max-w-3xl">
  <div class="card bg-base-100 shadow-xl">
    <div class="card-body">
      <h2 class="card-title">Your Favorites</h2>

      <!-- Loading state -->
      <div id="favorites-loading" class="flex justify-center py-4">
        <span class="loading loading-spinner loading-md"></span>
        <p class="ml-2">Loading your favorites...</p>
      </div>

      <!-- Empty state -->
      <div id="favorites-empty" class="hidden py-4">
        <div class="alert">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            class="stroke-info shrink-0 w-6 h-6"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
            ></path>
          </svg>
          <span
            >No favorites yet. Click the heart icon on a Pokémon to add
            it!</span
          >
        </div>
      </div>

      <!-- Favorites grid -->
      <div
        id="favorites-grid"
        class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 mt-4 hidden"
      ></div>
    </div>
  </div>
</div>

<script>
  // Make this function available globally so pagination.js can call it
  window.fetchFavorites = fetchFavorites;

  // Fetch favorites when the page loads
  document.addEventListener("DOMContentLoaded", fetchFavorites);

  function fetchFavorites() {
    const favoritesLoading = document.getElementById("favorites-loading");
    const favoritesEmpty = document.getElementById("favorites-empty");
    const favoritesGrid = document.getElementById("favorites-grid");

    // Show loading state
    favoritesLoading.classList.remove("hidden");
    favoritesEmpty.classList.add("hidden");
    favoritesGrid.classList.add("hidden");

    fetch("/favorites")
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to fetch favorites");
        }
        return response.json();
      })
      .then((favorites) => {
        // Hide loading state
        favoritesLoading.classList.add("hidden");

        if (favorites.length === 0) {
          // Show empty state if no favorites
          favoritesEmpty.classList.remove("hidden");
          return;
        }

        // Show favorites grid and populate it
        favoritesGrid.classList.remove("hidden");
        displayFavorites(favorites, favoritesGrid);
      })
      .catch((error) => {
        console.error("Error fetching favorites:", error);

        // Hide loading state and show error
        favoritesLoading.classList.add("hidden");
        favoritesEmpty.textContent =
          "Failed to load favorites. Please try again later.";
        favoritesEmpty.classList.remove("hidden");
      });
  }

  function displayFavorites(favorites, container) {
    // Clear existing items
    container.innerHTML = "";

    // Create a card for each favorite
    favorites.forEach((favorite) => {
      const card = document.createElement("div");
      card.className =
        "card bg-base-100 border hover:shadow-md transition-shadow";

      // Default image if none provided
      const imageUrl =
        favorite.imageUrl ||
        "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/0.png";

      card.innerHTML = `
        <figure class="pt-2 bg-base-200">
          <img 
            src="${imageUrl}" 
            alt="${favorite.name}" 
            class="h-16 w-16 object-contain"
            onerror="this.src='https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/0.png';"
          >
        </figure>
        <div class="card-body p-2">
          <h3 class="card-title text-sm justify-between capitalize">
            ${favorite.name}
            <button 
              class="remove-favorite-btn btn btn-circle btn-xs btn-error"
              data-id="${favorite._id}"
              title="Remove from favorites"
            >
              ×
            </button>
          </h3>
        </div>
      `;

      // Add event listener to remove button
      const removeButton = card.querySelector(".remove-favorite-btn");
      removeButton.addEventListener("click", () =>
        removeFavorite(favorite._id)
      );

      container.appendChild(card);
    });
  }

  function removeFavorite(id) {
    fetch(`/favorites/${id}`, {
      method: "DELETE",
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to remove favorite");
        }
        return response.json();
      })
      .then(() => {
        fetchFavorites(); // Refresh the list
      })
      .catch((error) => {
        console.error("Error removing favorite:", error);
        alert("Failed to remove from favorites. Please try again.");
      });
  }
</script>
