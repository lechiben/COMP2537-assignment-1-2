<!-- views/partials/timeline-partial.ejs with DaisyUI -->
<div class="mt-6 mb-6 w-full max-w-3xl">
  <div class="card bg-base-100 shadow-xl">
    <div class="card-body">
      <div class="flex justify-between items-center mb-2">
        <h2 class="card-title">Recent Activity</h2>
        <a href="/timeline/view" class="btn btn-link btn-sm">
          View all
          <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </a>
      </div>
      
      <!-- Loading state -->
      <div id="timeline-loading" class="flex justify-center py-4">
        <span class="loading loading-spinner loading-md"></span>
        <p class="ml-2">Loading activity...</p>
      </div>
      
      <!-- Empty state -->
      <div id="timeline-empty" class="hidden py-4">
        <div class="alert">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
          <span>No activity yet. Start interacting with Pok√©mon Book!</span>
        </div>
      </div>
      
      <!-- Timeline -->
      <ul id="timeline-list" class="timeline timeline-compact timeline-snap-icon timeline-vertical"></ul>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', fetchRecentActivity);
  
  function fetchRecentActivity() {
    const timelineList = document.getElementById('timeline-list');
    const timelineLoading = document.getElementById('timeline-loading');
    const timelineEmpty = document.getElementById('timeline-empty');
    
    // Show loading state
    timelineLoading.classList.remove('hidden');
    timelineEmpty.classList.add('hidden');
    
    // Fetch the 5 most recent activities
    fetch('/timeline?limit=5')
      .then((response) => {
        if (!response.ok) {
          throw new Error('Failed to fetch timeline');
        }
        return response.json();
      })
      .then((activities) => {
        // Hide loading message
        timelineLoading.classList.add('hidden');
        
        if (activities.length === 0) {
          timelineEmpty.classList.remove('hidden');
          return;
        }
        
        // Clear any existing content
        timelineList.innerHTML = '';
        
        // Add each activity to the timeline
        activities.forEach((activity) => {
          const timelineItem = createTimelineItem(activity);
          timelineList.appendChild(timelineItem);
        });
      })
      .catch(error => {
        console.error('Error fetching timeline:', error);
        timelineLoading.classList.add('hidden');
        timelineEmpty.textContent = 'Failed to load recent activity.';
        timelineEmpty.classList.remove('hidden');
      });
  }
  
  function createTimelineItem(activity) {
    // Get the icon and text based on action type
    let iconClass = 'bg-base-300';
    let actionText = 'Activity';
    let actionIcon = 'üîÑ';
    
    if (activity.action === 'login') {
      iconClass = 'bg-success text-success-content';
      actionText = 'Logged in';
      actionIcon = 'üîê';
    } else if (activity.action === 'register') {
      iconClass = 'bg-primary text-primary-content';
      actionText = 'Registered account';
      actionIcon = '‚ú®';
    } else if (activity.action === 'logout') {
      iconClass = 'bg-warning text-warning-content';
      actionText = 'Logged out';
      actionIcon = 'üëã';
    } else if (activity.action === 'favorite_added') {
      iconClass = 'bg-error text-error-content';
      actionText = 'Added to favorites';
      actionIcon = '‚ù§Ô∏è';
    } else if (activity.action === 'favorite_removed') {
      iconClass = 'bg-info text-info-content';
      actionText = 'Removed from favorites';
      actionIcon = 'üíî';
    }
    
    // Format timestamp
    const timestamp = new Date(activity.timestamp);
    const formattedDate = timestamp.toLocaleDateString();
    const formattedTime = timestamp.toLocaleTimeString([], {
      hour: '2-digit',
      minute: '2-digit',
    });
    
    // Create the list item for the timeline
    const item = document.createElement('li');
    
    item.innerHTML = `
      <div class="timeline-middle">
        <div class="avatar placeholder">
          <div class="w-8 rounded-full ${iconClass}">
            <span>${actionIcon}</span>
          </div>
        </div>
      </div>
      <div class="timeline-end timeline-box">
        <div class="font-medium">${actionText}</div>
        <time class="text-xs opacity-60">${formattedDate}, ${formattedTime}</time>
        ${activity.action === 'favorite_added' || activity.action === 'favorite_removed' 
          ? `<div class="mt-1 text-xs">
              Pok√©mon: <span class="font-medium capitalize">${activity.details.pokemonName}</span>
             </div>` 
          : ''}
      </div>
      <hr/>
    `;
    
    return item;
  }
</script>