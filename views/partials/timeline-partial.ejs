<!-- views/partials/timeline-partial.ejs -->
<div class="mt-6 mb-6 w-full max-w-3xl bg-white rounded-lg shadow-md p-6">
  <div class="flex justify-between items-center mb-4">
    <h2 class="text-2xl font-semibold">Recent Activity</h2>
    <a
      href="/timeline/view"
      class="text-blue-500 hover:underline text-sm flex items-center"
    >
      <span>View all</span>
      <svg
        class="w-4 h-4 ml-1"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9 5l7 7-7 7"
        ></path>
      </svg>
    </a>
  </div>

  <div id="timeline-list" class="relative min-h-[100px]">
    <!-- Timeline line -->
    <div class="absolute left-3 top-0 bottom-0 w-0.5 bg-gray-200"></div>

    <!-- Empty state message (shown while loading) -->
    <p id="timeline-empty" class="hidden text-gray-500 text-center py-4 italic">
      Loading activity...
    </p>

    <!-- Timeline items will be added here by JavaScript -->
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", fetchRecentActivity);

  function fetchRecentActivity() {
    const timelineList = document.getElementById("timeline-list");
    const timelineEmpty = document.getElementById("timeline-empty");

    // Show loading state
    timelineEmpty.classList.remove("hidden");

    // Fetch the 5 most recent activities
    fetch("/timeline?limit=5")
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to fetch timeline");
        }
        return response.json();
      })
      .then((activities) => {
        // Hide loading message
        timelineEmpty.classList.add("hidden");

        if (activities.length === 0) {
          timelineEmpty.textContent =
            "No activity yet. Start interacting with Pok√©mon Book!";
          timelineEmpty.classList.remove("hidden");
          return;
        }

        // Clear any existing content
        const existingItems = timelineList.querySelectorAll(".timeline-item");
        existingItems.forEach((item) => item.remove());

        // Add each activity to the timeline
        activities.forEach((activity) => {
          const timelineItem = createTimelineItem(activity);
          timelineList.appendChild(timelineItem);
        });
      })
      .catch((error) => {
        console.error("Error fetching timeline:", error);
        timelineEmpty.textContent = "Failed to load recent activity.";
        timelineEmpty.classList.remove("hidden");
      });
  }

  function createTimelineItem(activity) {
    const item = document.createElement("div");
    item.className = "timeline-item relative pl-10 pb-6";

    // Set dot color based on action type
    let dotColor = "bg-gray-400";
    let actionText = "Activity";
    let actionIcon = "üîÑ";

    if (activity.action === "login") {
      dotColor = "bg-green-500";
      actionText = "Logged in";
      actionIcon = "üîê";
    } else if (activity.action === "register") {
      dotColor = "bg-purple-500";
      actionText = "Registered account";
      actionIcon = "‚ú®";
    } else if (activity.action === "logout") {
      dotColor = "bg-yellow-500";
      actionText = "Logged out";
      actionIcon = "üëã";
    } else if (activity.action === "favorite_added") {
      dotColor = "bg-red-500";
      actionText = "Added to favorites";
      actionIcon = "‚ù§Ô∏è";
    } else if (activity.action === "favorite_removed") {
      dotColor = "bg-blue-500";
      actionText = "Removed from favorites";
      actionIcon = "üíî";
    }

    // Format timestamp
    const timestamp = new Date(activity.timestamp);
    const formattedDate = timestamp.toLocaleDateString();
    const formattedTime = timestamp.toLocaleTimeString([], {
      hour: "2-digit",
      minute: "2-digit",
    });

    // Create timeline HTML
    item.innerHTML = `
      <div class="absolute left-1.5 top-1.5 h-3 w-3 rounded-full ${dotColor} border-2 border-white shadow-sm"></div>
      <div class="flex flex-col">
        <div class="flex items-baseline">
          <span class="mr-1">${actionIcon}</span>
          <h3 class="text-md font-medium">${actionText}</h3>
          <span class="ml-2 text-xs text-gray-500">${formattedDate}, ${formattedTime}</span>
        </div>
        ${
          activity.action === "favorite_added" ||
          activity.action === "favorite_removed"
            ? `<div class="mt-1 ml-1 text-sm text-gray-700">
              Pok√©mon: <span class="font-medium capitalize">${activity.details.pokemonName}</span>
             </div>`
            : ""
        }
      </div>
    `;

    return item;
  }
</script>
